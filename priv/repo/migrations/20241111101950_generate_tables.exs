defmodule PolicyIssue.Repo.Migrations.GenerateTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false
      add :first_name, :text, null: false
      add :last_name, :text, null: false
      add :photo_url, :text
      add :locale, :text, null: false, default: "en"
      add :type, :text, null: false, default: "attendee"
      add :admin, :boolean, null: false, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:social_medias, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :type, :text, null: false
      add :handle, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "social_medias_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:connections, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :status, :text, null: false, default: "pending"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :from_user_id,
          references(:users,
            column: :id,
            name: "connections_from_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :to_user_id,
          references(:users,
            column: :id,
            name: "connections_to_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:connections, [:from_user_id])

    create index(:connections, [:to_user_id])

    create unique_index(:connections, [:from_user_id, :to_user_id],
             name: "connections_unique_connection_index"
           )
  end

  def down do
    drop_if_exists unique_index(:connections, [:from_user_id, :to_user_id],
                     name: "connections_unique_connection_index"
                   )

    drop_if_exists index(:connections, [:to_user_id])

    drop_if_exists index(:connections, [:from_user_id])

    drop constraint(:connections, "connections_from_user_id_fkey")

    drop constraint(:connections, "connections_to_user_id_fkey")

    drop table(:connections)

    drop constraint(:social_medias, "social_medias_user_id_fkey")

    drop table(:social_medias)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
